Link : https://www.youtube.com/watch?v=TEWy9vZcxW4&list=PLQVvvaa0QuDcjD5BAw2DxE6OF2tius3V3&index=4&ab_channel=sentdex

import numpy as np 

np.random.seed(0)

# input is of size 3 and each hs 4 features
X = [[1, 2, 3, 2.5],
     [2.0, 5.0, -1.0, 2.0],
     [-1.5, 2.7, 3.3, -0.8]]

# Dense layer class has init method which defines weights and bias
# with shapes as no of inputs(here 4) and no of neurons we want
# Forward method will create the output using dot product(shape must be right for this)
class Layer_Dense:
    def __init__(self, n_inputs, n_neurons):
        self.weights = 0.10 * np.random.randn(n_inputs, n_neurons)
        self.biases = np.zeros((1, n_neurons))
    def forward(self, inputs):
        self.output = np.dot(inputs, self.weights) + self.biases

# layer1 will have 4 input neurons and 5 output neurons thus it will have 5 biases and weight is a matirx of 4*5 and input is matrix of 3*4
layer1 = Layer_Dense(4,5)
# similarly layer 2 will have 5 input neuraon, which must be same as previous layer output neuron, and 2 output neurons
layer2 = Layer_Dense(5,2)

# layer1.forward will give and ouptut with shape 3*5 as we pass input of 3 instances and we specified 5 output neurons
layer1.forward(X)
#print(layer1.output)
# layer1 output will become input for layer2
# similarly it will give output with sixe 3*2 as this time we have specified only 2 output neurons
layer2.forward(layer1.output)
print(layer2.output)
